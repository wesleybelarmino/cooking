// Mocks generated by Mockito 5.0.9 from annotations
// in cooking/test/features/recipe/domain/usecases/get_recipes_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cooking/core/error/failures.dart' as _i5;
import 'package:cooking/features/recipe/domain/entities/recipe_list.dart'
    as _i6;
import 'package:cooking/features/recipe/domain/repositories/recipe_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [RecipeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeRepository extends _i1.Mock implements _i3.RecipeRepository {
  MockRecipeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.RecipeList>> getRecipes() =>
      (super.noSuchMethod(Invocation.method(#getRecipes, []),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.RecipeList>>.value(
              _FakeEither<_i5.Failure, _i6.RecipeList>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.RecipeList>>);
}
